name: Build and Deploy Frontend to AWS EC2

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

permissions:
  id-token: write
  contents: read

env:
  NODE_VERSION: '18'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run type checking
      run: npx tsc --noEmit

    - name: Run ESLint
      run: npm run lint || echo "ESLint warnings found but continuing..."

    - name: Test build
      env:
        NEXT_PUBLIC_API_URL: http://localhost:8000
        NEXTAUTH_URL: http://localhost:3000
        NEXTAUTH_SECRET: test-secret-key-for-ci
      run: npm run build

  build-and-deploy-dev:
    name: Build and Deploy to Dev Environment
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      env:
        NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
        NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
        NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
      run: |
        echo "Building Next.js application..."
        npm run build
        
        # Create deployment package
        echo "Creating deployment package..."
        mkdir -p deployment-package
        cp -r .next deployment-package/
        cp -r public deployment-package/
        cp package*.json deployment-package/
        
        # Create standalone package.json with only production dependencies
        cd deployment-package
        npm ci --only=production
        
        # Create start script
        cat > start.sh << 'EOF'
        #!/bin/bash
        export NEXT_PUBLIC_API_URL=$1
        export NEXTAUTH_URL=$2
        export NEXTAUTH_SECRET=$3
        export NODE_ENV=production
        export PATH=/usr/local/bin:$PATH
        /usr/local/bin/npm start
        EOF
        chmod +x start.sh
        
        # Create archive
        cd ..
        tar -czf deployment-package.tar.gz deployment-package/

    - name: Upload deployment package
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package-dev
        path: deployment-package.tar.gz
        retention-days: 1

    - name: Copy deployment package to EC2
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.EC2_HOST_DEV }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "deployment-package.tar.gz"
        target: "/tmp/"

    - name: Deploy to EC2 Dev
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST_DEV }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_KEY }}
        timeout: 10m
        script: |
          set -e
          
          echo "🚀 Starting frontend deployment..."
          
          cd /home/ec2-user
          
          # Stop existing service
          echo "Stopping existing Next.js service..."
          sudo pkill -f "next.*start" || echo "No Next.js process found"
          sudo pkill -f "node.*server.js" || echo "No Node.js process found"
          sleep 3
          
          # Clean previous deployment
          echo "Cleaning previous deployment..."
          sudo rm -rf academic-saas-frontend-old || true
          [ -d academic-saas-frontend ] && mv academic-saas-frontend academic-saas-frontend-old
          
          # Create deployment directory and extract
          mkdir -p academic-saas-frontend
          cd academic-saas-frontend
          tar -xzf /tmp/deployment-package.tar.gz --strip-components=1
          rm /tmp/deployment-package.tar.gz
          
          # Ensure Node.js 18 is installed
          if [ ! -f /usr/local/bin/node ] || [ "$(/usr/local/bin/node --version)" != "v18.20.5" ]; then
            echo "Installing Node.js 18..."
            cd /tmp
            wget -q https://unofficial-builds.nodejs.org/download/release/v18.20.5/node-v18.20.5-linux-x64-glibc-217.tar.gz
            sudo tar -xzf node-v18.20.5-linux-x64-glibc-217.tar.gz -C /usr/local --strip-components=1
            cd -
          fi
          
          echo "Node.js version: $(/usr/local/bin/node --version)"
          
          # Start application
          echo "Starting Next.js application..."
          nohup ./start.sh "${{ secrets.NEXT_PUBLIC_API_URL }}" "${{ secrets.NEXTAUTH_URL }}" "${{ secrets.NEXTAUTH_SECRET }}" > /tmp/nextjs.log 2>&1 &
          echo $! > /tmp/nextjs.pid
          
          # Wait for startup
          echo "Waiting for Next.js to start..."
          for i in {1..10}; do
            if curl -s -f http://localhost:3000/ > /dev/null; then
              echo "✅ Next.js started successfully!"
              break
            fi
            echo "Attempt $i/10: Waiting for startup..."
            sleep 3
            if [ $i -eq 10 ]; then
              echo "❌ Failed to start Next.js"
              cat /tmp/nextjs.log
              exit 1
            fi
          done
          
          # Update nginx if needed
          echo "Checking nginx configuration..."
          if [ -f "/home/ec2-user/academic-saas-backend/nginx.conf" ]; then
            sudo cp /home/ec2-user/academic-saas-backend/nginx.conf /etc/nginx/nginx.conf
            sudo nginx -t && sudo systemctl reload nginx
            echo "✅ Nginx configuration updated"
          fi
          
          echo "✅ Frontend deployed successfully!"
          echo "🌐 URL: http://${{ secrets.EC2_HOST_DEV }}"
          echo "🎨 Frontend: http://${{ secrets.EC2_HOST_DEV }}/ (via nginx)"
          echo "🔧 Backend API: http://${{ secrets.EC2_HOST_DEV }}/api/"

  build-and-deploy-prod:
    name: Build and Deploy to Production Environment  
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      env:
        NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL_PROD }}
        NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL_PROD }}
        NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
      run: |
        echo "Building Next.js application..."
        npm run build
        
        # Create deployment package
        echo "Creating deployment package..."
        mkdir -p deployment-package
        cp -r .next deployment-package/
        cp -r public deployment-package/
        cp package*.json deployment-package/
        
        # Create standalone package.json with only production dependencies
        cd deployment-package
        npm ci --only=production
        
        # Create start script
        cat > start.sh << 'EOF'
        #!/bin/bash
        export NEXT_PUBLIC_API_URL=$1
        export NEXTAUTH_URL=$2
        export NEXTAUTH_SECRET=$3
        export NODE_ENV=production
        export PATH=/usr/local/bin:$PATH
        /usr/local/bin/npm start
        EOF
        chmod +x start.sh
        
        # Create archive
        cd ..
        tar -czf deployment-package.tar.gz deployment-package/

    - name: Upload deployment package
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package-prod
        path: deployment-package.tar.gz
        retention-days: 1

    - name: Copy deployment package to EC2
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.EC2_HOST_PROD }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "deployment-package.tar.gz"
        target: "/tmp/"

    - name: Deploy to EC2 Prod
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST_PROD }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_KEY }}
        timeout: 10m
        script: |
          set -e
          
          echo "🚀 Starting frontend deployment..."
          
          cd /home/ec2-user
          
          # Create backup
          echo "Creating backup of current deployment..."
          sudo cp -r academic-saas-frontend academic-saas-frontend-backup-$(date +%Y%m%d-%H%M%S) || true
          
          # Stop existing service
          echo "Stopping existing Next.js service..."
          sudo pkill -f "next.*start" || echo "No Next.js process found"
          sudo pkill -f "node.*server.js" || echo "No Node.js process found"
          sleep 3
          
          # Clean previous deployment
          echo "Cleaning previous deployment..."
          sudo rm -rf academic-saas-frontend-old || true
          [ -d academic-saas-frontend ] && mv academic-saas-frontend academic-saas-frontend-old
          
          # Create deployment directory and extract
          mkdir -p academic-saas-frontend
          cd academic-saas-frontend
          tar -xzf /tmp/deployment-package.tar.gz --strip-components=1
          rm /tmp/deployment-package.tar.gz
          
          # Ensure Node.js 18 is installed
          if [ ! -f /usr/local/bin/node ] || [ "$(/usr/local/bin/node --version)" != "v18.20.5" ]; then
            echo "Installing Node.js 18..."
            cd /tmp
            wget -q https://unofficial-builds.nodejs.org/download/release/v18.20.5/node-v18.20.5-linux-x64-glibc-217.tar.gz
            sudo tar -xzf node-v18.20.5-linux-x64-glibc-217.tar.gz -C /usr/local --strip-components=1
            cd -
          fi
          
          echo "Node.js version: $(/usr/local/bin/node --version)"
          
          # Start application
          echo "Starting Next.js application..."
          nohup ./start.sh "${{ secrets.NEXT_PUBLIC_API_URL_PROD }}" "${{ secrets.NEXTAUTH_URL_PROD }}" "${{ secrets.NEXTAUTH_SECRET }}" > /tmp/nextjs.log 2>&1 &
          echo $! > /tmp/nextjs.pid
          
          # Wait for startup
          echo "Waiting for Next.js to start..."
          for i in {1..10}; do
            if curl -s -f http://localhost:3000/ > /dev/null; then
              echo "✅ Next.js started successfully!"
              break
            fi
            echo "Attempt $i/10: Waiting for startup..."
            sleep 3
            if [ $i -eq 10 ]; then
              echo "❌ Failed to start Next.js"
              cat /tmp/nextjs.log
              exit 1
            fi
          done
          
          echo "✅ Frontend deployed successfully in PRODUCTION!"