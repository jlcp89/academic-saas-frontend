name: Build and Deploy Frontend to AWS EC2

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

permissions:
  id-token: write
  contents: read

env:
  NODE_VERSION: '18'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run type checking
      run: npx tsc --noEmit

    - name: Run ESLint
      run: npm run lint || echo "ESLint warnings found but continuing..."

    - name: Test build
      env:
        NEXT_PUBLIC_API_URL: http://localhost:8000
        NEXTAUTH_URL: http://localhost:3000
        NEXTAUTH_SECRET: test-secret-key-for-ci
      run: npm run build


  deploy-dev:
    name: Deploy to Dev Environment
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    environment: development
    steps:
      - name: Deploy Frontend to EC2 Dev
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST_DEV }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            export NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
            export NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}
            export NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
            export NODE_ENV=production
            
            cd /home/ec2-user
            echo "Removing previous frontend deployment..."
            sudo rm -rf academic-saas-frontend
            
            echo "Cloning frontend repository (dev branch)..."
            git clone --depth 1 --branch dev --single-branch https://${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository_owner }}/academic-saas-frontend.git academic-saas-frontend
            
            cd academic-saas-frontend
            
            echo "Installing Node.js and dependencies..."
            
            # Remove existing incompatible Node.js installation
            echo "Removing existing Node.js installation..."
            sudo yum remove -y nodejs npm || true
            sudo rm -rf /usr/bin/node /usr/bin/npm /usr/lib/node_modules || true
            
            # Install Node.js using NVM for better compatibility control
            echo "Installing Node.js via NVM..."
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            
            # Install Node.js 16.20.2 (known to work with Amazon Linux 2)
            nvm install 16.20.2
            nvm use 16.20.2
            nvm alias default 16.20.2
            
            # Create symlinks for global access
            sudo ln -sf $HOME/.nvm/versions/node/v16.20.2/bin/node /usr/bin/node
            sudo ln -sf $HOME/.nvm/versions/node/v16.20.2/bin/npm /usr/bin/npm
            
            echo "Node.js version: $(node --version)"
            echo "NPM version: $(npm --version)"
            
            echo "Installing dependencies..."
            # Source NVM for subsequent commands
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm use 16.20.2
            
            npm ci
            
            echo "Building application with environment variables..."
            NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }} \
            NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }} \
            NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }} \
            npm run build
            
            echo "Stopping existing Next.js service..."
            sudo pkill -f "next.*start" || echo "No Next.js process found"
            sudo pkill -f "node.*server.js" || echo "No Node.js process found"
            
            echo "Starting Next.js application..."
            # Start Next.js in production mode on port 3000
            nohup npm start > /tmp/nextjs.log 2>&1 &
            echo $! > /tmp/nextjs.pid
            
            echo "Waiting for Next.js to start..."
            sleep 15
            
            # Verify Next.js is running
            if [ -f /tmp/nextjs.pid ]; then
              NEXTJS_PID=$(cat /tmp/nextjs.pid)
              if ps -p $NEXTJS_PID > /dev/null 2>&1; then
                echo "✅ Next.js started successfully with PID: $NEXTJS_PID"
              else
                echo "❌ Next.js process not running"
                cat /tmp/nextjs.log || echo "No logs available"
                exit 1
              fi
            fi
            
            echo "Updating nginx configuration..."
            # Copy the updated nginx config from backend repo
            if [ -f "/home/ec2-user/academic-saas-backend/nginx.conf" ]; then
              sudo cp /home/ec2-user/academic-saas-backend/nginx.conf /etc/nginx/nginx.conf
              sudo nginx -t || { echo "Nginx config test failed"; exit 1; }
              sudo systemctl reload nginx
              echo "✅ Nginx configuration updated"
            fi
            
            echo "Verifying frontend deployment..."
            for i in {1..5}; do
              if curl -f http://localhost:3000/ > /dev/null 2>&1; then
                echo "✅ Frontend deployed successfully in DEV!"
                echo "🌐 URL: http://${{ secrets.EC2_HOST_DEV }}"
                echo "🎨 Frontend: http://${{ secrets.EC2_HOST_DEV }}/ (via nginx)"
                echo "🔧 Backend API: http://${{ secrets.EC2_HOST_DEV }}/api/"
                break
              else
                echo "Attempt $i/5: Waiting for frontend to respond..."
                sleep 3
                if [ $i -eq 5 ]; then
                  echo "❌ Frontend deployment failed"
                  echo "Next.js logs:"
                  cat /tmp/nextjs.log || echo "No logs available"
                  exit 1
                fi
              fi
            done

  deploy-prod:
    name: Deploy to Production Environment  
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Deploy Frontend to EC2 Prod
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST_PROD }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            export NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL_PROD }}
            export NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL_PROD }}
            export NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
            export NODE_ENV=production
            
            cd /home/ec2-user
            echo "Creating backup of current frontend deployment..."
            sudo cp -r academic-saas-frontend academic-saas-frontend-backup-$(date +%Y%m%d-%H%M%S) || true
            
            echo "Removing previous frontend deployment..."
            sudo rm -rf academic-saas-frontend
            
            echo "Cloning frontend repository (main branch)..."
            git clone --depth 1 --branch main --single-branch https://${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository_owner }}/academic-saas-frontend.git academic-saas-frontend
            
            cd academic-saas-frontend
            
            echo "Installing Node.js and dependencies..."
            
            # Remove existing incompatible Node.js installation
            echo "Removing existing Node.js installation..."
            sudo yum remove -y nodejs npm || true
            sudo rm -rf /usr/bin/node /usr/bin/npm /usr/lib/node_modules || true
            
            # Install Node.js using NVM for better compatibility control
            echo "Installing Node.js via NVM..."
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            
            # Install Node.js 16.20.2 (known to work with Amazon Linux 2)
            nvm install 16.20.2
            nvm use 16.20.2
            nvm alias default 16.20.2
            
            # Create symlinks for global access
            sudo ln -sf $HOME/.nvm/versions/node/v16.20.2/bin/node /usr/bin/node
            sudo ln -sf $HOME/.nvm/versions/node/v16.20.2/bin/npm /usr/bin/npm
            
            echo "Node.js version: $(node --version)"
            echo "NPM version: $(npm --version)"
            
            echo "Installing dependencies..."
            # Source NVM for subsequent commands
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm use 16.20.2
            
            npm ci
            
            echo "Building application with environment variables..."
            NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL_PROD }} \
            NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL_PROD }} \
            NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }} \
            npm run build
            
            echo "Stopping existing Next.js service..."
            sudo pkill -f "next.*start" || echo "No Next.js process found"
            sudo pkill -f "node.*server.js" || echo "No Node.js process found"
            
            echo "Starting Next.js application..."
            # Start Next.js in production mode on port 3000
            nohup npm start > /tmp/nextjs.log 2>&1 &
            echo $! > /tmp/nextjs.pid
            
            echo "Waiting for Next.js to start..."
            sleep 15
            
            # Verify Next.js is running
            if [ -f /tmp/nextjs.pid ]; then
              NEXTJS_PID=$(cat /tmp/nextjs.pid)
              if ps -p $NEXTJS_PID > /dev/null 2>&1; then
                echo "✅ Next.js started successfully with PID: $NEXTJS_PID"
              else
                echo "❌ Next.js process not running"
                cat /tmp/nextjs.log || echo "No logs available"
                exit 1
              fi
            fi
            
            echo "Health check..."
            for i in {1..5}; do
              if curl -f http://localhost:3000/ > /dev/null 2>&1; then
                echo "✅ Frontend deployed successfully in PRODUCTION!"
                break
              else
                echo "Attempt $i/5: Waiting for frontend to respond..."
                sleep 3
              fi
            done