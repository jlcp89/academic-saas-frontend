name: Build and Deploy Frontend to AWS EC2

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

permissions:
  id-token: write
  contents: read

env:
  NODE_VERSION: '18'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run type checking
      run: npx tsc --noEmit

    - name: Run ESLint
      run: npm run lint || echo "ESLint warnings found but continuing..."

    - name: Test build
      env:
        NEXT_PUBLIC_API_URL: http://localhost:8000
        NEXTAUTH_URL: http://localhost:3000
        NEXTAUTH_SECRET: test-secret-key-for-ci
      run: npm run build


  deploy-dev:
    name: Deploy to Dev Environment
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    environment: development
    steps:
      - name: Deploy Frontend to EC2 Dev
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST_DEV }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            export NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
            export NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}
            export NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
            export NODE_ENV=production
            
            cd /home/ec2-user
            echo "Removing previous frontend deployment..."
            sudo rm -rf academic-saas-frontend
            
            echo "Cloning frontend repository (dev branch)..."
            git clone --depth 1 --branch dev --single-branch https://${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository_owner }}/academic-saas-frontend.git academic-saas-frontend
            
            cd academic-saas-frontend
            
            echo "Installing Node.js and dependencies..."
            # Install Node.js if not present
            if ! command -v node &> /dev/null; then
              curl -fsSL https://rpm.nodesource.com/setup_18.x | sudo bash -
              sudo yum install -y nodejs
            fi
            
            echo "Installing dependencies..."
            npm ci
            
            echo "Building application with environment variables..."
            NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }} \
            NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }} \
            NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }} \
            npm run build
            
            echo "Stopping existing nginx service..."
            sudo systemctl stop nginx || true
            
            echo "Configuring nginx for frontend..."
            sudo rm -rf /var/www/html/*
            
            # Copy Next.js standalone files
            if [ -d ".next/standalone" ]; then
              echo "Copying standalone files..."
              sudo cp -r .next/standalone/* /var/www/html/
            else
              echo "Warning: .next/standalone not found, using regular build"
              sudo mkdir -p /var/www/html
              sudo cp -r .next /var/www/html/
            fi
            
            # Copy static files
            if [ -d ".next/static" ]; then
              echo "Copying static files..."
              sudo mkdir -p /var/www/html/.next/
              sudo cp -r .next/static /var/www/html/.next/
            fi
            
            # Copy public files
            if [ -d "public" ]; then
              echo "Copying public files..."
              sudo cp -r public/* /var/www/html/ || true
            fi
            
            echo "Setting permissions..."
            sudo chown -R nginx:nginx /var/www/html
            sudo chmod -R 755 /var/www/html
            
            echo "Starting nginx service..."
            sudo systemctl start nginx
            sudo systemctl enable nginx
            
            echo "Waiting for nginx to start..."
            sleep 10
            
            echo "Verifying deployment..."
            if curl -f http://localhost/ > /dev/null 2>&1; then
              echo "‚úÖ Frontend deployed successfully in DEV!"
              echo "üåê URL: http://${{ secrets.EC2_HOST_DEV }}"
            else
              echo "‚ùå Error: Application not responding"
              sudo systemctl status nginx
              sudo nginx -t
              exit 1
            fi

  deploy-prod:
    name: Deploy to Production Environment  
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Deploy Frontend to EC2 Prod
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST_PROD }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            export NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL_PROD }}
            export NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL_PROD }}
            export NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
            export NODE_ENV=production
            
            cd /home/ec2-user
            echo "Creating backup of current frontend deployment..."
            sudo cp -r academic-saas-frontend academic-saas-frontend-backup-$(date +%Y%m%d-%H%M%S) || true
            
            echo "Removing previous frontend deployment..."
            sudo rm -rf academic-saas-frontend
            
            echo "Cloning frontend repository (main branch)..."
            git clone --depth 1 --branch main --single-branch https://${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository_owner }}/academic-saas-frontend.git academic-saas-frontend
            
            cd academic-saas-frontend
            
            echo "Installing Node.js and dependencies..."
            # Install Node.js if not present
            if ! command -v node &> /dev/null; then
              curl -fsSL https://rpm.nodesource.com/setup_18.x | sudo bash -
              sudo yum install -y nodejs
            fi
            
            echo "Installing dependencies..."
            npm ci
            
            echo "Building application with environment variables..."
            NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL_PROD }} \
            NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL_PROD }} \
            NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }} \
            npm run build
            
            echo "Stopping existing nginx service..."
            sudo systemctl stop nginx || true
            
            echo "Configuring nginx for frontend..."
            sudo rm -rf /var/www/html/*
            
            # Copy Next.js standalone files
            if [ -d ".next/standalone" ]; then
              echo "Copying standalone files..."
              sudo cp -r .next/standalone/* /var/www/html/
            else
              echo "Warning: .next/standalone not found, using regular build"
              sudo mkdir -p /var/www/html
              sudo cp -r .next /var/www/html/
            fi
            
            # Copy static files
            if [ -d ".next/static" ]; then
              echo "Copying static files..."
              sudo mkdir -p /var/www/html/.next/
              sudo cp -r .next/static /var/www/html/.next/
            fi
            
            # Copy public files
            if [ -d "public" ]; then
              echo "Copying public files..."
              sudo cp -r public/* /var/www/html/ || true
            fi
            
            echo "Setting permissions..."
            sudo chown -R nginx:nginx /var/www/html
            sudo chmod -R 755 /var/www/html
            
            echo "Starting nginx service..."
            sudo systemctl start nginx
            sudo systemctl enable nginx
            
            echo "Waiting for nginx to start..."
            sleep 10
            
            echo "Health check..."
            if curl -f http://localhost/ > /dev/null 2>&1; then
              echo "‚úÖ Frontend deployed successfully in PRODUCTION!"
            else
              echo "‚ùå Error: Application not responding"
              sudo systemctl status nginx
              sudo nginx -t
              exit 1
            fi