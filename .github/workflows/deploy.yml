name: Build and Deploy Frontend to AWS EC2

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

permissions:
  id-token: write
  contents: read

env:
  NODE_VERSION: '18'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run type checking
      run: npx tsc --noEmit

    - name: Run ESLint
      run: npm run lint || echo "ESLint warnings found but continuing..."

    - name: Test build
      env:
        NEXT_PUBLIC_API_URL: http://localhost:8000
        NEXTAUTH_URL: http://localhost:3000
        NEXTAUTH_SECRET: test-secret-key-for-ci
      run: npm run build

  deploy-dev:
    name: Deploy to Dev Environment
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      env:
        NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
        NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
        NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
      run: npm run build

    - name: Create deployment archive
      run: |
        # Check which files exist and create archive
        files=".next public package.json package-lock.json"
        [ -f next.config.js ] && files="$files next.config.js"
        [ -f next.config.ts ] && files="$files next.config.ts"
        [ -f next-env.d.ts ] && files="$files next-env.d.ts"
        [ -f tsconfig.json ] && files="$files tsconfig.json"
        echo "Creating archive with: $files"
        tar -czf deploy.tar.gz $files

    - name: Copy files to EC2
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.EC2_HOST_DEV }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "deploy.tar.gz"
        target: "/tmp/"

    - name: Deploy Frontend to EC2 Dev
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST_DEV }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_KEY }}
        timeout: 10m
        command_timeout: 10m
        script: |
          # Kill any existing Node processes without causing SSH to exit
          echo "Cleaning up old processes..."
          sudo killall -q node || true
          sleep 2
          
          # Remove old deployment
          cd /home/ec2-user
          rm -rf academic-saas-frontend-old
          if [ -d academic-saas-frontend ]; then
            mv academic-saas-frontend academic-saas-frontend-old
          fi
          
          # Create new deployment directory
          mkdir -p academic-saas-frontend
          cd academic-saas-frontend
          
          # Extract deployment files
          if [ ! -f /tmp/deploy.tar.gz ]; then
            echo "❌ Deployment archive not found!"
            exit 1
          fi
          tar -xzf /tmp/deploy.tar.gz
          rm /tmp/deploy.tar.gz
          
          # Install Node.js if needed
          if [ ! -f /usr/local/bin/node ]; then
            echo "Installing Node.js..."
            cd /tmp
            wget -q https://unofficial-builds.nodejs.org/download/release/v18.20.5/node-v18.20.5-linux-x64-glibc-217.tar.gz
            sudo tar -xzf node-v18.20.5-linux-x64-glibc-217.tar.gz -C /usr/local --strip-components=1
            cd /home/ec2-user/academic-saas-frontend
          fi
          
          # Install only production dependencies (minimal)
          export PATH=/usr/local/bin:$PATH
          /usr/local/bin/npm ci --production --omit=dev
          
          # Start the app
          echo "Starting application..."
          export NODE_ENV=production
          export NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
          export NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}
          export NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
          nohup /usr/local/bin/npm start > /tmp/nextjs.log 2>&1 &
          
          # Wait and verify
          sleep 10
          if curl -s http://localhost:3000 > /dev/null; then
            echo "✅ Deployment successful!"
            echo "URL: http://${{ secrets.EC2_HOST_DEV }}"
          else
            echo "❌ Deployment failed"
            tail -20 /tmp/nextjs.log
            exit 1
          fi

  deploy-prod:
    name: Deploy to Production Environment  
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      env:
        NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL_PROD }}
        NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL_PROD }}
        NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
      run: npm run build

    - name: Create deployment archive
      run: |
        # Check which files exist and create archive
        files=".next public package.json package-lock.json"
        [ -f next.config.js ] && files="$files next.config.js"
        [ -f next.config.ts ] && files="$files next.config.ts"
        [ -f next-env.d.ts ] && files="$files next-env.d.ts"
        [ -f tsconfig.json ] && files="$files tsconfig.json"
        echo "Creating archive with: $files"
        tar -czf deploy.tar.gz $files

    - name: Copy files to EC2
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.EC2_HOST_PROD }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "deploy.tar.gz"
        target: "/tmp/"

    - name: Deploy Frontend to EC2 Prod
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST_PROD }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_KEY }}
        timeout: 10m
        command_timeout: 10m
        script: |
          # Kill any existing Node processes without causing SSH to exit
          echo "Cleaning up old processes..."
          sudo killall -q node || true
          sleep 2
          
          # Backup and remove old deployment
          cd /home/ec2-user
          if [ -d academic-saas-frontend ]; then
            cp -r academic-saas-frontend academic-saas-frontend-backup-$(date +%Y%m%d-%H%M%S)
            rm -rf academic-saas-frontend-old
            mv academic-saas-frontend academic-saas-frontend-old
          fi
          
          # Create new deployment directory
          mkdir -p academic-saas-frontend
          cd academic-saas-frontend
          
          # Extract deployment files
          if [ ! -f /tmp/deploy.tar.gz ]; then
            echo "❌ Deployment archive not found!"
            exit 1
          fi
          tar -xzf /tmp/deploy.tar.gz
          rm /tmp/deploy.tar.gz
          
          # Install Node.js if needed
          if [ ! -f /usr/local/bin/node ]; then
            echo "Installing Node.js..."
            cd /tmp
            wget -q https://unofficial-builds.nodejs.org/download/release/v18.20.5/node-v18.20.5-linux-x64-glibc-217.tar.gz
            sudo tar -xzf node-v18.20.5-linux-x64-glibc-217.tar.gz -C /usr/local --strip-components=1
            cd /home/ec2-user/academic-saas-frontend
          fi
          
          # Install only production dependencies (minimal)
          export PATH=/usr/local/bin:$PATH
          /usr/local/bin/npm ci --production --omit=dev
          
          # Start the app
          echo "Starting application..."
          export NODE_ENV=production
          export NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL_PROD }}
          export NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL_PROD }}
          export NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
          nohup /usr/local/bin/npm start > /tmp/nextjs.log 2>&1 &
          
          # Wait and verify
          sleep 10
          if curl -s http://localhost:3000 > /dev/null; then
            echo "✅ Deployment successful!"
            echo "URL: http://${{ secrets.EC2_HOST_PROD }}"
          else
            echo "❌ Deployment failed"
            tail -20 /tmp/nextjs.log
            exit 1
          fi