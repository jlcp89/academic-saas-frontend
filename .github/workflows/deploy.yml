name: Build and Deploy Frontend to AWS EC2

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

permissions:
  id-token: write
  contents: read

env:
  NODE_VERSION: '18'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run type checking
      run: npx tsc --noEmit

    - name: Run ESLint
      run: npm run lint || echo "ESLint warnings found but continuing..."

    - name: Test build
      env:
        NEXT_PUBLIC_API_URL: http://localhost:8000
        NEXTAUTH_URL: http://localhost:3000
        NEXTAUTH_SECRET: test-secret-key-for-ci
      run: npm run build

  deploy-dev:
    name: Deploy to Dev Environment
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    environment: development
    
    steps:
    - name: Check EC2 Instance Status
      run: |
        echo "Checking if EC2 instance is reachable..."
        if ! timeout 10 nc -zv ${{ secrets.EC2_HOST_DEV }} 22; then
          echo "❌ ERROR: Cannot connect to EC2 instance at ${{ secrets.EC2_HOST_DEV }}:22"
          echo "Please check:"
          echo "1. EC2 instance is running"
          echo "2. Security group allows SSH (port 22) from GitHub Actions"
          echo "3. EC2_HOST_DEV secret is correct"
          exit 1
        fi
        echo "✅ EC2 instance is reachable"

    - name: Deploy Frontend to EC2 Dev
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST_DEV }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_KEY }}
        timeout: 30m
        script: |
          #!/bin/bash
          # Deployment script for Next.js frontend
          
          echo "🚀 Starting frontend deployment..."
          echo "Instance: ${{ secrets.EC2_HOST_DEV }}"
          echo "Time: $(date)"
          
          # Function to handle errors gracefully
          handle_error() {
            echo "Error occurred: $1"
            exit 1
          }
          
          # Move to home directory
          cd /home/ec2-user || handle_error "Failed to change directory"
          
          # Stop existing service
          echo "Stopping existing Next.js service..."
          if pgrep -f "next.*start" > /dev/null; then
            sudo pkill -f "next.*start" || true
            echo "Next.js process stopped"
          else
            echo "No Next.js process found"
          fi
          
          if pgrep -f "node.*server.js" > /dev/null; then
            sudo pkill -f "node.*server.js" || true
            echo "Node.js process stopped"
          else
            echo "No Node.js process found"
          fi
          
          sleep 3
          
          # Clean previous deployment
          echo "Cleaning previous deployment..."
          sudo rm -rf academic-saas-frontend-old || true
          [ -d academic-saas-frontend ] && mv academic-saas-frontend academic-saas-frontend-old
          
          # Clone repository
          echo "Cloning repository..."
          git clone --depth 1 --branch dev --single-branch https://${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository_owner }}/academic-saas-frontend.git academic-saas-frontend
          
          cd academic-saas-frontend
          
          # Ensure Node.js 18 is installed
          if [ ! -f /usr/local/bin/node ] || [ "$(/usr/local/bin/node --version)" != "v18.20.5" ]; then
            echo "Installing Node.js 18..."
            cd /tmp
            rm -f node-v18.20.5-linux-x64-glibc-217.tar.gz
            wget -q https://unofficial-builds.nodejs.org/download/release/v18.20.5/node-v18.20.5-linux-x64-glibc-217.tar.gz
            sudo tar -xzf node-v18.20.5-linux-x64-glibc-217.tar.gz -C /usr/local --strip-components=1
            cd /home/ec2-user/academic-saas-frontend
          fi
          
          echo "Node.js version: $(/usr/local/bin/node --version)"
          echo "NPM version: $(/usr/local/bin/npm --version)"
          
          # Set environment variables
          export NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
          export NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}
          export NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
          export NODE_ENV=production
          export PATH=/usr/local/bin:$PATH
          
          # Create .env.production.local file
          cat > .env.production.local << EOF
          NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
          NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}
          NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
          EOF
          
          # Install only production dependencies
          echo "Installing production dependencies..."
          /usr/local/bin/npm ci --production
          
          echo "Building application..."
          /usr/local/bin/npm run build
          
          # Create startup script
          cat > start.sh << 'EOF'
          #!/bin/bash
          export NODE_ENV=production
          export PATH=/usr/local/bin:$PATH
          exec /usr/local/bin/npm start
          EOF
          chmod +x start.sh
          
          # Start application
          echo "Starting Next.js application..."
          nohup ./start.sh > /tmp/nextjs.log 2>&1 &
          echo $! > /tmp/nextjs.pid
          
          # Wait for startup
          echo "Waiting for Next.js to start..."
          for i in {1..15}; do
            if curl -s -f http://localhost:3000/ > /dev/null; then
              echo "✅ Next.js started successfully!"
              break
            fi
            echo "Attempt $i/15: Waiting for startup..."
            sleep 3
            if [ $i -eq 15 ]; then
              echo "❌ Failed to start Next.js"
              echo "=== Last 50 lines of logs ==="
              tail -n 50 /tmp/nextjs.log || echo "No logs available"
              exit 1
            fi
          done
          
          # Update nginx if configured
          echo "Checking nginx configuration..."
          if [ -f "/home/ec2-user/academic-saas-backend/nginx.conf" ]; then
            sudo cp /home/ec2-user/academic-saas-backend/nginx.conf /etc/nginx/nginx.conf
            if sudo nginx -t; then
              sudo systemctl reload nginx
              echo "✅ Nginx configuration updated"
            else
              echo "⚠️ Nginx config test failed, skipping reload"
            fi
          fi
          
          echo "✅ Frontend deployed successfully!"
          echo "🌐 URL: http://${{ secrets.EC2_HOST_DEV }}"
          echo "🎨 Frontend: http://${{ secrets.EC2_HOST_DEV }}/ (via nginx)"
          echo "🔧 Backend API: http://${{ secrets.EC2_HOST_DEV }}/api/"

  deploy-prod:
    name: Deploy to Production Environment  
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Check EC2 Instance Status
      run: |
        echo "Checking if EC2 instance is reachable..."
        if ! timeout 10 nc -zv ${{ secrets.EC2_HOST_PROD }} 22; then
          echo "❌ ERROR: Cannot connect to EC2 instance at ${{ secrets.EC2_HOST_PROD }}:22"
          echo "Please check:"
          echo "1. EC2 instance is running"
          echo "2. Security group allows SSH (port 22) from GitHub Actions"
          echo "3. EC2_HOST_PROD secret is correct"
          exit 1
        fi
        echo "✅ EC2 instance is reachable"

    - name: Deploy Frontend to EC2 Prod
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST_PROD }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_KEY }}
        timeout: 30m
        script: |
          #!/bin/bash
          # Deployment script for Next.js frontend (PRODUCTION)
          
          echo "🚀 Starting frontend deployment to PRODUCTION..."
          echo "Instance: ${{ secrets.EC2_HOST_PROD }}"
          echo "Time: $(date)"
          
          # Function to handle errors gracefully
          handle_error() {
            echo "Error occurred: $1"
            exit 1
          }
          
          # Move to home directory
          cd /home/ec2-user || handle_error "Failed to change directory"
          
          # Create backup
          echo "Creating backup of current deployment..."
          if [ -d academic-saas-frontend ]; then
            sudo cp -r academic-saas-frontend academic-saas-frontend-backup-$(date +%Y%m%d-%H%M%S) || true
          fi
          
          # Stop existing service
          echo "Stopping existing Next.js service..."
          if pgrep -f "next.*start" > /dev/null; then
            sudo pkill -f "next.*start" || true
            echo "Next.js process stopped"
          else
            echo "No Next.js process found"
          fi
          
          if pgrep -f "node.*server.js" > /dev/null; then
            sudo pkill -f "node.*server.js" || true
            echo "Node.js process stopped"
          else
            echo "No Node.js process found"
          fi
          
          sleep 3
          
          # Clean previous deployment
          echo "Cleaning previous deployment..."
          sudo rm -rf academic-saas-frontend-old || true
          [ -d academic-saas-frontend ] && mv academic-saas-frontend academic-saas-frontend-old
          
          # Clone repository
          echo "Cloning repository..."
          git clone --depth 1 --branch main --single-branch https://${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository_owner }}/academic-saas-frontend.git academic-saas-frontend
          
          cd academic-saas-frontend
          
          # Ensure Node.js 18 is installed
          if [ ! -f /usr/local/bin/node ] || [ "$(/usr/local/bin/node --version)" != "v18.20.5" ]; then
            echo "Installing Node.js 18..."
            cd /tmp
            rm -f node-v18.20.5-linux-x64-glibc-217.tar.gz
            wget -q https://unofficial-builds.nodejs.org/download/release/v18.20.5/node-v18.20.5-linux-x64-glibc-217.tar.gz
            sudo tar -xzf node-v18.20.5-linux-x64-glibc-217.tar.gz -C /usr/local --strip-components=1
            cd /home/ec2-user/academic-saas-frontend
          fi
          
          echo "Node.js version: $(/usr/local/bin/node --version)"
          echo "NPM version: $(/usr/local/bin/npm --version)"
          
          # Set environment variables
          export NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL_PROD }}
          export NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL_PROD }}
          export NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
          export NODE_ENV=production
          export PATH=/usr/local/bin:$PATH
          
          # Create .env.production.local file
          cat > .env.production.local << EOF
          NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL_PROD }}
          NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL_PROD }}
          NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
          EOF
          
          # Install only production dependencies
          echo "Installing production dependencies..."
          /usr/local/bin/npm ci --production
          
          echo "Building application..."
          /usr/local/bin/npm run build
          
          # Create startup script
          cat > start.sh << 'EOF'
          #!/bin/bash
          export NODE_ENV=production
          export PATH=/usr/local/bin:$PATH
          exec /usr/local/bin/npm start
          EOF
          chmod +x start.sh
          
          # Start application
          echo "Starting Next.js application..."
          nohup ./start.sh > /tmp/nextjs.log 2>&1 &
          echo $! > /tmp/nextjs.pid
          
          # Wait for startup
          echo "Waiting for Next.js to start..."
          for i in {1..15}; do
            if curl -s -f http://localhost:3000/ > /dev/null; then
              echo "✅ Next.js started successfully!"
              break
            fi
            echo "Attempt $i/15: Waiting for startup..."
            sleep 3
            if [ $i -eq 15 ]; then
              echo "❌ Failed to start Next.js"
              echo "=== Last 50 lines of logs ==="
              tail -n 50 /tmp/nextjs.log || echo "No logs available"
              exit 1
            fi
          done
          
          echo "✅ Frontend deployed successfully in PRODUCTION!"
          echo "🌐 URL: http://${{ secrets.EC2_HOST_PROD }}"