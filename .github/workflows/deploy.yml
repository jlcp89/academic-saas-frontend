name: Deploy Frontend to AWS EC2

permissions:
  id-token: write
  contents: read

on:
  push:
    branches:
      - main
      - feature/good-cicd
  pull_request:
    types: [opened, reopened, synchronize]
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: academic-saas-frontend

jobs:
  # Build and push Docker image to ECR
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.image.outputs.tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        id: image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build the Docker image
          docker build \
            --build-arg NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }} \
            --build-arg NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }} \
            --build-arg NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }} \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            .
          
          # Push to ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          echo "tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

  # Deploy to DEV environment
  deploy-dev:
    name: Deploy to DEV Environment
    needs: build
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Deploy to EC2 (dev)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST_DEV }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Login to ECR
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
            
            # Stop existing container
            docker stop academic-saas-frontend || true
            docker rm academic-saas-frontend || true
            
            # Pull new image
            docker pull ${{ secrets.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ needs.build.outputs.image-tag }}
            
            # Run new container
            docker run -d \
              --name academic-saas-frontend \
              --restart unless-stopped \
              -p 3000:3000 \
              -e NODE_ENV=development \
              -e NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL_DEV }} \
              -e NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL_DEV }} \
              -e NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }} \
              ${{ secrets.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ needs.build.outputs.image-tag }}
            
            # Clean up old images
            docker image prune -f
            
            echo "DEV deployment completed"

  # Deploy to PROD environment
  deploy-prod:
    name: Deploy to PROD Environment
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: prod

    steps:
      - name: Deploy to EC2 (prod)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST_PROD }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Login to ECR
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
            
            # Stop existing container
            docker stop academic-saas-frontend || true
            docker rm academic-saas-frontend || true
            
            # Pull new image
            docker pull ${{ secrets.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
            
            # Run new container
            docker run -d \
              --name academic-saas-frontend \
              --restart unless-stopped \
              -p 3000:3000 \
              -e NODE_ENV=production \
              -e NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL_PROD }} \
              -e NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL_PROD }} \
              -e NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }} \
              ${{ secrets.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
            
            # Clean up old images
            docker image prune -f
            
            echo "PROD deployment completed"