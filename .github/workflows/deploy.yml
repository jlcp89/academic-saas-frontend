name: Deploy Frontend to AWS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: academic-saas-frontend
  NODE_VERSION: '18'

jobs:
  deploy:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    environment: development

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      env:
        NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
        NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
        NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
      run: |
        npm run build

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Deploy to EC2 via Auto Scaling Group
      env:
        ASG_NAME: academic-saas-dev-frontend-asg
        IMAGE_URI: ${{ steps.build-image.outputs.image }}
      run: |
        # Get instance IPs from ASG
        INSTANCE_IDS=$(aws autoscaling describe-auto-scaling-groups \
          --auto-scaling-group-names $ASG_NAME \
          --query 'AutoScalingGroups[0].Instances[?LifecycleState==`InService`].InstanceId' \
          --output text)
        
        if [ -z "$INSTANCE_IDS" ]; then
          echo "No running instances found in ASG"
          exit 1
        fi
        
        # Get instance IPs
        for INSTANCE_ID in $INSTANCE_IDS; do
          INSTANCE_IP=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)
          
          if [ "$INSTANCE_IP" != "null" ] && [ "$INSTANCE_IP" != "" ]; then
            echo "Deploying to instance $INSTANCE_ID ($INSTANCE_IP)"
            
            # Setup SSH key
            echo "${{ secrets.EC2_SSH_KEY }}" > /tmp/ec2-key.pem
            chmod 600 /tmp/ec2-key.pem
            
            # Create environment file locally
            {
              echo "NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}"
              echo "NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}"
              echo "NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}"
              echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}"
              echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}"
            } > /tmp/frontend.env
            
            # Deploy via SSH
            ECR_REGISTRY="${{ steps.login-ecr.outputs.registry }}"
            scp -i /tmp/ec2-key.pem -o StrictHostKeyChecking=no /tmp/frontend.env ubuntu@$INSTANCE_IP:/tmp/frontend.env
            ssh -i /tmp/ec2-key.pem -o StrictHostKeyChecking=no ubuntu@$INSTANCE_IP << EOF
# Login to ECR
aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REGISTRY

# Pull latest image
docker pull $IMAGE_URI

# Setup environment file
sudo mkdir -p /opt/academic-saas
sudo cp /tmp/frontend.env /opt/academic-saas/.env
sudo chown root:root /opt/academic-saas/.env
sudo chmod 600 /opt/academic-saas/.env

# Stop existing container if running
docker stop academic-saas-frontend || true
docker rm academic-saas-frontend || true

# Run new container
docker run -d \
  --name academic-saas-frontend \
  --restart unless-stopped \
  -p 3000:3000 \
  --env-file /opt/academic-saas/.env \
  $IMAGE_URI

# Health check
sleep 30
curl -f http://localhost:3000/ || exit 1

echo "Frontend deployment completed successfully"

# Clean up temp file
rm -f /tmp/frontend.env
EOF
            
            # Clean up key file
            rm -f /tmp/ec2-key.pem
          else
            echo "Instance $INSTANCE_ID has no public IP, skipping"
          fi
        done

    - name: Verify deployment
      run: |
        # Wait for deployment to complete
        sleep 120
        
        # Check health endpoint
        FRONTEND_URL="http://academic-saas-dev-frontend-alb-560850445.us-east-1.elb.amazonaws.com"
        curl -f $FRONTEND_URL/ || exit 1
        
        echo "Deployment verification completed"