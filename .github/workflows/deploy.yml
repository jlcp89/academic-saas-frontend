name: Build and Deploy Frontend to AWS EC2

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

permissions:
  id-token: write
  contents: read

env:
  NODE_VERSION: '18'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run type checking
      run: npx tsc --noEmit

    - name: Run ESLint
      run: npm run lint || echo "ESLint warnings found but continuing..."

    - name: Test build
      env:
        NEXT_PUBLIC_API_URL: http://localhost:8000
        NEXTAUTH_URL: http://localhost:3000
        NEXTAUTH_SECRET: test-secret-key-for-ci
      run: npm run build

  build:
    name: Build Next.js Application
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main'
    outputs: 
      artifact_filename: ${{ steps.create_artifact_filename.outputs.filename }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
        run: npm run build

      - name: Create artifact filename
        id: create_artifact_filename
        run: echo "filename=academic-saas-frontend-${{ github.sha }}.tar.gz" >> $GITHUB_OUTPUT

      - name: Archive build output
        run: tar -czvf ${{ steps.create_artifact_filename.outputs.filename }} .next public node_modules package.json package-lock.json next.config.ts

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-archive 
          path: ${{ steps.create_artifact_filename.outputs.filename }} 
          retention-days: 5

  deploy-dev:
    name: Deploy to Dev Environment
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    environment: development
    env:
      ARTIFACT_FILENAME: ${{ needs.build.outputs.artifact_filename }}
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build-archive 

      - name: Verify downloaded artifact
        run: |
          echo "📦 Verificando artefacto descargado:"
          ls -lh ${{ env.ARTIFACT_FILENAME }}

      - name: Copy artifact to EC2 Dev
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST_DEV }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          source: ${{ env.ARTIFACT_FILENAME }}
          target: "/home/ec2-user/academic-saas-frontend"    

      - name: Deploy on EC2 Dev
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST_DEV }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            echo "🚀 Iniciando despliegue de frontend en DEV..."
            
            # Navegar al directorio de la aplicación
            cd /home/ec2-user/academic-saas-frontend
            
            # Crear archivo de variables de entorno
            echo "⚙️ Configurando variables de entorno..."
            cat > .env.local << EOF
            NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
            NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}
            NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
            NODE_ENV=production
            EOF
            
            # Descomprimir el artefacto
            echo "📦 Descomprimiendo artefacto..."
            tar -xzf ${{ env.ARTIFACT_FILENAME }}
            
            # Limpiar archivo comprimido
            rm ${{ env.ARTIFACT_FILENAME }}
            
            # Verificar contenido
            echo "📁 Verificando contenido desplegado..."
            ls -la
            
            # Verificar estructura de archivos
            echo "🔍 Verificando estructura de archivos..."
            find . -name "server.js" -type f || echo "server.js not found"
            ls -la .next/ || echo "No .next directory found"
            ls -la .next/standalone/ || echo "No standalone directory found"
            
            # Verificar e instalar Node.js si no existe
            echo "🔍 Verificando Node.js y npm..."
            if ! command -v node &> /dev/null; then
              echo "📦 Node.js no encontrado, instalando con nvm..."
              
              # Instalar nvm (Node Version Manager)
              curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
              export NVM_DIR="$HOME/.nvm"
              [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
              
              # Instalar Node.js 18 usando nvm
              nvm install 18
              nvm use 18
              nvm alias default 18
              
              # Agregar Node.js al PATH para systemd
              sudo ln -sf $HOME/.nvm/versions/node/v18.*/bin/node /usr/local/bin/node
              sudo ln -sf $HOME/.nvm/versions/node/v18.*/bin/npm /usr/local/bin/npm
              
              echo "✅ Node.js instalado via nvm:"
              node --version
              npm --version
            else
              echo "✅ Node.js ya está instalado:"
              node --version
              npm --version
            fi
            
            # Crear o actualizar el servicio systemd
            echo "🔧 Configurando servicio systemd con npm start..."
            sudo tee /etc/systemd/system/academic-saas-frontend.service > /dev/null << EOF
            [Unit]
            Description=Academic SaaS Frontend
            After=network.target
            
            [Service]
            Type=simple
            User=ec2-user
            WorkingDirectory=/home/ec2-user/academic-saas-frontend
            ExecStart=/usr/local/bin/npm start
            Restart=always
            RestartSec=10
            Environment=NODE_ENV=production
            Environment=PORT=3000
            Environment=HOSTNAME=0.0.0.0
            EnvironmentFile=/home/ec2-user/academic-saas-frontend/.env.local
            
            [Install]
            WantedBy=multi-user.target
            EOF
            
            # Recargar y reiniciar el servicio
            echo "🔄 Reiniciando servicio..."
            sudo systemctl daemon-reload
            sudo systemctl enable academic-saas-frontend.service
            sudo systemctl restart academic-saas-frontend.service
            
            # Esperar y verificar que el servicio esté funcionando
            echo "⏳ Esperando que el servicio esté listo..."
            sleep 15
            
            # Verificar estado del servicio
            sudo systemctl status academic-saas-frontend.service --no-pager
            
            # Verificar que la aplicación responda
            if curl -f http://localhost:3000/ > /dev/null 2>&1; then
              echo "✅ Frontend desplegado exitosamente en DEV!"
              echo "🌐 URL: http://${{ secrets.EC2_HOST_DEV }}:3000"
            else
              echo "❌ Error: La aplicación no responde en puerto 3000"
              sudo journalctl -u academic-saas-frontend.service -n 20 --no-pager
              exit 1
            fi

      - name: Verify deployment
        run: |
          echo "🔍 Verificando despliegue externo..."
          sleep 10
          curl -f http://${{ secrets.EC2_HOST_DEV }}:3000/ || exit 1
          echo "✅ Verificación completada exitosamente!"

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "🎉 Frontend DEV deployment successful!"
            echo "✅ Application is live and healthy"
            echo "🌐 Access at: http://${{ secrets.EC2_HOST_DEV }}:3000"
          else
            echo "❌ Frontend DEV deployment failed!"
            echo "🔍 Check the logs above for more details"
          fi

  deploy-prod:
    name: Deploy to Production Environment  
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    env:
      ARTIFACT_FILENAME: ${{ needs.build.outputs.artifact_filename }}
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build-archive

      - name: Verify downloaded artifact
        run: |
          echo "📦 Verificando artefacto descargado:"
          ls -lh ${{ env.ARTIFACT_FILENAME }}

      - name: Copy artifact to EC2 Prod
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST_PROD }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          source: ${{ env.ARTIFACT_FILENAME }}
          target: "/home/ec2-user/academic-saas-frontend"

      - name: Deploy on EC2 Prod
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST_PROD }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            echo "🚀 Iniciando despliegue de frontend en PRODUCTION..."
            
            # Navegar al directorio de la aplicación
            cd /home/ec2-user/academic-saas-frontend
            
            # Crear archivo de variables de entorno
            echo "⚙️ Configurando variables de entorno..."
            cat > .env.local << EOF
            NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL_PROD }}
            NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL_PROD }}
            NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
            NODE_ENV=production
            EOF
            
            # Descomprimir el artefacto
            echo "📦 Descomprimiendo artefacto..."
            tar -xzf ${{ env.ARTIFACT_FILENAME }}
            
            # Limpiar archivo comprimido
            rm ${{ env.ARTIFACT_FILENAME }}
            
            # Verificar contenido
            echo "📁 Verificando contenido desplegado..."
            ls -la
            
            # Verificar estructura de archivos
            echo "🔍 Verificando estructura de archivos..."
            find . -name "server.js" -type f || echo "server.js not found"
            ls -la .next/ || echo "No .next directory found"
            ls -la .next/standalone/ || echo "No standalone directory found"
            
            # Verificar e instalar Node.js si no existe
            echo "🔍 Verificando Node.js y npm..."
            if ! command -v node &> /dev/null; then
              echo "📦 Node.js no encontrado, instalando con nvm..."
              
              # Instalar nvm (Node Version Manager)
              curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
              export NVM_DIR="$HOME/.nvm"
              [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
              
              # Instalar Node.js 18 usando nvm
              nvm install 18
              nvm use 18
              nvm alias default 18
              
              # Agregar Node.js al PATH para systemd
              sudo ln -sf $HOME/.nvm/versions/node/v18.*/bin/node /usr/local/bin/node
              sudo ln -sf $HOME/.nvm/versions/node/v18.*/bin/npm /usr/local/bin/npm
              
              echo "✅ Node.js instalado via nvm:"
              node --version
              npm --version
            else
              echo "✅ Node.js ya está instalado:"
              node --version
              npm --version
            fi
            
            # Crear o actualizar el servicio systemd
            echo "🔧 Configurando servicio systemd con npm start..."
            sudo tee /etc/systemd/system/academic-saas-frontend.service > /dev/null << EOF
            [Unit]
            Description=Academic SaaS Frontend
            After=network.target
            
            [Service]
            Type=simple
            User=ec2-user
            WorkingDirectory=/home/ec2-user/academic-saas-frontend
            ExecStart=/usr/local/bin/npm start
            Restart=always
            RestartSec=10
            Environment=NODE_ENV=production
            Environment=PORT=3000
            Environment=HOSTNAME=0.0.0.0
            EnvironmentFile=/home/ec2-user/academic-saas-frontend/.env.local
            
            [Install]
            WantedBy=multi-user.target
            EOF
            
            # Recargar y reiniciar el servicio
            echo "🔄 Reiniciando servicio..."
            sudo systemctl daemon-reload
            sudo systemctl enable academic-saas-frontend.service
            sudo systemctl restart academic-saas-frontend.service
            
            # Esperar y verificar que el servicio esté funcionando
            echo "⏳ Esperando que el servicio esté listo..."
            sleep 15
            
            # Verificar estado del servicio
            sudo systemctl status academic-saas-frontend.service --no-pager
            
            # Verificar que la aplicación responda
            if curl -f http://localhost:3000/ > /dev/null 2>&1; then
              echo "✅ Frontend desplegado exitosamente en PRODUCTION!"
            else
              echo "❌ Error: La aplicación no responde en puerto 3000"
              sudo journalctl -u academic-saas-frontend.service -n 20 --no-pager
              exit 1
            fi

      - name: Verify deployment
        run: |
          echo "🔍 Verificando despliegue externo..."
          sleep 10
          curl -f http://${{ secrets.EC2_HOST_PROD }}:3000/ || exit 1
          echo "✅ Verificación completada exitosamente!"

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "🎉 Frontend PRODUCTION deployment successful!"
            echo "✅ Application is live and healthy"
          else
            echo "❌ Frontend PRODUCTION deployment failed!"
            echo "🔍 Check the logs above for more details"
          fi