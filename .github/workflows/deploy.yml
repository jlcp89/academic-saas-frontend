name: Deploy Frontend to AWS

on:
  push:
    branches: [ main, dev, feature/good-cicd ]
  pull_request:
    branches: [ main, dev ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: academic-saas-frontend
  NODE_VERSION: '20'

jobs:
  test-and-build:
    name: Test and Build
    runs-on: ubuntu-latest
    
    outputs:
      image-uri: ${{ steps.build-image.outputs.image }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run type checking
      run: npx tsc --noEmit || true

    - name: Run ESLint
      run: npm run lint || true

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build Docker image with build args
        docker build \
          --build-arg NEXT_PUBLIC_API_URL="${{ secrets.NEXT_PUBLIC_API_URL }}" \
          --build-arg NEXTAUTH_URL="${{ secrets.NEXTAUTH_URL }}" \
          --build-arg NEXTAUTH_SECRET="${{ secrets.NEXTAUTH_SECRET }}" \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        
        # Push to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Output for next jobs
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: test-and-build
    if: |
      github.event_name == 'push' && 
      (github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/feature/good-cicd')
    environment: development

    steps:
    - name: Deploy to Development Instance
      env:
        IMAGE_URI: ${{ needs.test-and-build.outputs.image-uri }}
        DEV_INSTANCE_IP: ${{ secrets.DEV_INSTANCE_IP }}
      run: |
        if [ -z "$DEV_INSTANCE_IP" ]; then
          echo "❌ DEV_INSTANCE_IP secret not configured"
          exit 1
        fi
        
        echo "🚀 Deploying image: $IMAGE_URI"
        echo "📍 Target server: $DEV_INSTANCE_IP"
        
        # Setup SSH key
        echo "${{ secrets.EC2_SSH_KEY }}" > /tmp/ec2-key.pem
        chmod 600 /tmp/ec2-key.pem
        
        # Simple deployment command
        ssh -i /tmp/ec2-key.pem -o StrictHostKeyChecking=no ec2-user@$DEV_INSTANCE_IP << 'ENDSSH'
        # Login to ECR
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 860639121390.dkr.ecr.us-east-1.amazonaws.com
        
        # Stop old container
        docker stop academic-saas-frontend || true
        docker rm academic-saas-frontend || true
        
        # Start new container
        docker run -d \
          --name academic-saas-frontend \
          --restart unless-stopped \
          --network host \
          -e NEXT_PUBLIC_API_URL="${{ secrets.NEXT_PUBLIC_API_URL }}" \
          -e NEXTAUTH_URL="${{ secrets.NEXTAUTH_URL }}" \
          -e NEXTAUTH_SECRET="${{ secrets.NEXTAUTH_SECRET }}" \
          ${{ needs.test-and-build.outputs.image-uri }}
        
        # Check if running
        sleep 30
        docker ps | grep academic-saas-frontend
        ENDSSH
        
        # Clean up
        rm -f /tmp/ec2-key.pem
        
        echo "✅ Deployment completed"

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [test-and-build, deploy-dev]
    if: always()
    
    steps:
    - name: Summary
      run: |
        echo "## 📊 Deployment Summary"
        echo "- Build: ${{ needs.test-and-build.result }}"
        echo "- Deploy: ${{ needs.deploy-dev.result }}"
        
        if [ "${{ needs.deploy-dev.result }}" == "success" ]; then
          echo "✅ Frontend deployed successfully to http://${{ secrets.DEV_INSTANCE_IP }}:3000"
        fi