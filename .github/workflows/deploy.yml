name: Deploy Frontend to AWS

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: academic-saas-frontend
  NODE_VERSION: '18'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run type checking
      run: npx tsc --noEmit

    - name: Run ESLint
      run: npm run lint || echo "ESLint warnings found but continuing..."

    - name: Test build
      env:
        NEXT_PUBLIC_API_URL: http://localhost:8000
        NEXTAUTH_URL: http://localhost:3000
        NEXTAUTH_SECRET: test-secret-key-for-ci
      run: |
        npm run build

  deploy:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST_DEV }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          echo "🚀 Iniciando despliegue del frontend..."
          
          # Crear directorio si no existe
          sudo mkdir -p /home/ec2-user/academic-saas-frontend
          cd /home/ec2-user/academic-saas-frontend
          
          # Limpiar despliegue anterior
          echo "🧹 Limpiando despliegue anterior..."
          sudo rm -rf .git .next node_modules package-lock.json
          
          # Clonar repositorio
          echo "📥 Clonando repositorio..."
          git clone --depth 1 --branch ${{ github.ref_name }} https://github.com/jlcp89/academic-saas-frontend.git temp-frontend
          cp -r temp-frontend/* .
          cp -r temp-frontend/.* . 2>/dev/null || true
          rm -rf temp-frontend
          
          # Instalar dependencias
          echo "📦 Instalando dependencias..."
          npm ci
          
          # Crear archivo .env
          echo "⚙️ Configurando variables de entorno..."
          cat > .env.local << EOF
          NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
          NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}
          NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
          EOF
          
          # Construir aplicación
          echo "🔨 Construyendo aplicación..."
          npm run build
          
          # Detener contenedor anterior si existe
          echo "🛑 Deteniendo contenedor anterior..."
          sudo docker stop academic-saas-frontend-dev || true
          sudo docker rm academic-saas-frontend-dev || true
          
          # Construir imagen Docker
          echo "🐳 Construyendo imagen Docker..."
          sudo docker build -t academic-saas-frontend:dev .
          
          # Ejecutar contenedor
          echo "🚀 Iniciando contenedor..."
          sudo docker run -d \
            --name academic-saas-frontend-dev \
            --restart unless-stopped \
            -p 3000:3000 \
            --env-file .env.local \
            academic-saas-frontend:dev
          
          # Esperar y verificar
          echo "⏳ Esperando que la aplicación esté lista..."
          sleep 30
          
          # Verificar que esté funcionando
          if curl -f http://localhost:3000/ > /dev/null 2>&1; then
            echo "✅ Frontend desplegado exitosamente!"
            echo "🌐 URL: http://${{ secrets.EC2_HOST_DEV }}:3000"
          else
            echo "❌ Error: La aplicación no responde"
            sudo docker logs academic-saas-frontend-dev
            exit 1
          fi

    - name: Verify deployment
      run: |
        echo "🔍 Verificando despliegue..."
        sleep 10
        curl -f http://${{ secrets.EC2_HOST_DEV }}:3000/ || exit 1
        echo "✅ Verificación completada exitosamente!"

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "🎉 Frontend deployment successful!"
          echo "✅ Application is live and healthy"
          echo "🌐 Access at: http://${{ secrets.EC2_HOST_DEV }}:3000"
        else
          echo "❌ Frontend deployment failed!"
          echo "🔍 Check the logs above for more details"
        fi

  deploy-dev:
    name: Deploy Frontend to DEV
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/dev' || github.event.pull_request.base.ref == 'dev'
    environment: development

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      env:
        NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
        NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
        NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
      run: |
        npm run build

    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST_DEV }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          echo "🚀 Iniciando despliegue del frontend a DEV..."
          
          # Crear directorio si no existe
          sudo mkdir -p /home/ec2-user/academic-saas-frontend
          cd /home/ec2-user/academic-saas-frontend
          
          # Limpiar despliegue anterior
          echo "🧹 Limpiando despliegue anterior..."
          sudo rm -rf .git .next node_modules package-lock.json
          
          # Clonar repositorio
          echo "📥 Clonando repositorio..."
          git clone --depth 1 --branch ${{ github.ref_name }} https://github.com/jlcp89/academic-saas-frontend.git temp-frontend
          cp -r temp-frontend/* .
          cp -r temp-frontend/.* . 2>/dev/null || true
          rm -rf temp-frontend
          
          # Instalar dependencias
          echo "📦 Instalando dependencias..."
          npm ci
          
          # Crear archivo .env
          echo "⚙️ Configurando variables de entorno..."
          cat > .env.local << EOF
          NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
          NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}
          NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
          EOF
          
          # Construir aplicación
          echo "🔨 Construyendo aplicación..."
          npm run build
          
          # Detener contenedor anterior si existe
          echo "🛑 Deteniendo contenedor anterior..."
          sudo docker stop academic-saas-frontend-dev || true
          sudo docker rm academic-saas-frontend-dev || true
          
          # Construir imagen Docker
          echo "🐳 Construyendo imagen Docker..."
          sudo docker build -t academic-saas-frontend:dev .
          
          # Ejecutar contenedor
          echo "🚀 Iniciando contenedor..."
          sudo docker run -d \
            --name academic-saas-frontend-dev \
            --restart unless-stopped \
            -p 3000:3000 \
            --env-file .env.local \
            academic-saas-frontend:dev
          
          # Esperar y verificar
          echo "⏳ Esperando que la aplicación esté lista..."
          sleep 30
          
          # Verificar que esté funcionando
          if curl -f http://localhost:3000/ > /dev/null 2>&1; then
            echo "✅ Frontend desplegado exitosamente!"
            echo "🌐 URL: http://${{ secrets.EC2_HOST_DEV }}:3000"
          else
            echo "❌ Error: La aplicación no responde"
            sudo docker logs academic-saas-frontend-dev
            exit 1
          fi

    - name: Verify deployment
      run: |
        echo "🔍 Verificando despliegue..."
        sleep 10
        curl -f http://${{ secrets.EC2_HOST_DEV }}:3000/ || exit 1
        echo "✅ Verificación completada exitosamente!"

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "🎉 Frontend DEV deployment successful!"
          echo "✅ Application is live and healthy"
          echo "🌐 Access at: http://${{ secrets.EC2_HOST_DEV }}:3000"
        else
          echo "❌ Frontend DEV deployment failed!"
          echo "🔍 Check the logs above for more details"
        fi