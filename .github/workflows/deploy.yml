name: Deploy Frontend to AWS

on:
  push:
    branches: [ main, dev, feature/good-cicd ]
  pull_request:
    branches: [ main, dev ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: academic-saas-frontend
  NODE_VERSION: '20'
  AWS_ACCOUNT_ID: '860639121390'

jobs:
  # ========================================
  # TESTING & BUILD JOB
  # ========================================
  test-and-build:
    name: Test and Build
    runs-on: ubuntu-latest
    
    outputs:
      image-uri: ${{ steps.build-image.outputs.image }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run type checking
      run: npx tsc --noEmit

    - name: Run ESLint
      run: npm run lint

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build Docker image with build args
        docker build \
          --build-arg NEXT_PUBLIC_API_URL="${{ secrets.NEXT_PUBLIC_API_URL }}" \
          --build-arg NEXTAUTH_URL="${{ secrets.NEXTAUTH_URL }}" \
          --build-arg NEXTAUTH_SECRET="${{ secrets.NEXTAUTH_SECRET }}" \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        
        # Push to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Output for next jobs
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  # ========================================
  # DEVELOPMENT DEPLOYMENT JOB
  # ========================================
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/feature/good-cicd'
    environment: development

    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy to Development Instance
      env:
        IMAGE_URI: ${{ needs.test-and-build.outputs.image-uri }}
        DEV_INSTANCE_IP: ${{ secrets.DEV_INSTANCE_IP }}
        EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
        NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
        NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
      run: |
        if [ -z "$DEV_INSTANCE_IP" ]; then
          echo "❌ DEV_INSTANCE_IP secret not configured"
          exit 1
        fi
        
        echo "🚀 Deploying to development instance: $DEV_INSTANCE_IP"
        
        # Setup SSH key
        echo "$EC2_SSH_KEY" > /tmp/ec2-key.pem
        chmod 600 /tmp/ec2-key.pem
        
        # Create deployment script
        cat > /tmp/deploy-frontend.sh << 'DEPLOY_SCRIPT'
        #!/bin/bash
        set -e
        
        IMAGE_URI="$1"
        NEXT_PUBLIC_API_URL="$2"
        NEXTAUTH_URL="$3"
        NEXTAUTH_SECRET="$4"
        
        echo "🔄 Starting frontend deployment..."
        
        # Login to ECR
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${IMAGE_URI%%/*}
        
        # Stop and remove existing container
        echo "⏹️  Stopping existing frontend container..."
        docker stop academic-saas-frontend || true
        docker rm academic-saas-frontend || true
        
        # Pull new image
        echo "📥 Pulling new image: $IMAGE_URI"
        docker pull "$IMAGE_URI"
        
        # Create environment file
        sudo mkdir -p /opt/academic-saas
        cat > /tmp/frontend.env << ENV_FILE
        NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL
        NEXTAUTH_URL=$NEXTAUTH_URL
        NEXTAUTH_SECRET=$NEXTAUTH_SECRET
        ENV_FILE
        
        sudo mv /tmp/frontend.env /opt/academic-saas/.env.frontend
        sudo chown root:root /opt/academic-saas/.env.frontend
        sudo chmod 600 /opt/academic-saas/.env.frontend
        
        # Start new container
        echo "🚀 Starting new frontend container..."
        docker run -d \
          --name academic-saas-frontend \
          --restart unless-stopped \
          --network host \
          --env-file /opt/academic-saas/.env.frontend \
          "$IMAGE_URI"
        
        # Wait and check health
        echo "⏳ Waiting for container to be healthy..."
        sleep 30
        
        if docker ps | grep -q academic-saas-frontend; then
          echo "✅ Frontend container is running"
          if curl -f http://localhost:3000/ > /dev/null 2>&1; then
            echo "✅ Frontend deployment completed successfully!"
          else
            echo "❌ Health check failed"
            docker logs academic-saas-frontend --tail 20
            exit 1
          fi
        else
          echo "❌ Frontend container failed to start"
          docker logs academic-saas-frontend --tail 20
          exit 1
        fi
        DEPLOY_SCRIPT
        
        # Make script executable
        chmod +x /tmp/deploy-frontend.sh
        
        # Copy and execute on remote server
        scp -i /tmp/ec2-key.pem -o StrictHostKeyChecking=no /tmp/deploy-frontend.sh ec2-user@$DEV_INSTANCE_IP:/tmp/
        
        ssh -i /tmp/ec2-key.pem -o StrictHostKeyChecking=no ec2-user@$DEV_INSTANCE_IP \
          "/tmp/deploy-frontend.sh '$IMAGE_URI' '$NEXT_PUBLIC_API_URL' '$NEXTAUTH_URL' '$NEXTAUTH_SECRET'"
        
        # Clean up
        rm -f /tmp/ec2-key.pem /tmp/deploy-frontend.sh

    - name: Verify deployment
      run: |
        DEV_INSTANCE_IP="${{ secrets.DEV_INSTANCE_IP }}"
        FRONTEND_URL="http://$DEV_INSTANCE_IP:3000"
        
        echo "🔍 Testing frontend at $FRONTEND_URL"
        sleep 30
        
        if curl -f $FRONTEND_URL/ > /dev/null 2>&1; then
          echo "✅ Development deployment verification completed"
        else
          echo "❌ Development deployment verification failed"
          exit 1
        fi

  # ========================================
  # NOTIFICATION JOB
  # ========================================
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [test-and-build, deploy-dev]
    if: always()
    
    steps:
    - name: Notify deployment results
      run: |
        echo "📊 Deployment Summary:"
        echo "===================="
        echo "Build Status: ${{ needs.test-and-build.result }}"
        echo "Dev Deployment: ${{ needs.deploy-dev.result }}"
        
        if [ "${{ needs.test-and-build.result }}" == "success" ]; then
          echo "✅ Build and tests passed"
        else
          echo "❌ Build or tests failed"
        fi
        
        if [ "${{ needs.deploy-dev.result }}" == "success" ]; then
          echo "✅ Development deployment successful"
          echo "🌐 Dev Access: http://${{ secrets.DEV_INSTANCE_IP }}:3000"
        elif [ "${{ needs.deploy-dev.result }}" == "skipped" ]; then
          echo "⏭️ Development deployment skipped"
        else
          echo "❌ Development deployment failed"
        fi