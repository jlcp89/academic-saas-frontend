name: Build and Deploy Frontend to AWS EC2

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

permissions:
  id-token: write
  contents: read

env:
  NODE_VERSION: '18'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run type checking
      run: npx tsc --noEmit

    - name: Run ESLint
      run: npm run lint || echo "ESLint warnings found but continuing..."

    - name: Test build
      env:
        NEXT_PUBLIC_API_URL: http://localhost:8000
        NEXTAUTH_URL: http://localhost:3000
        NEXTAUTH_SECRET: test-secret-key-for-ci
      run: npm run build

  deploy-dev:
    name: Deploy to Dev Environment
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      env:
        NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
        NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
        NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
      run: |
        npm run build
        # Prepare standalone deployment
        cp -r public .next/standalone/
        cp -r .next/static .next/standalone/.next/

    - name: Deploy Frontend to EC2 Dev
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST_DEV }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_KEY }}
        timeout: 15m
        command_timeout: 15m
        script: |
          # Stop existing service
          echo "Stopping frontend service..."
          sudo systemctl stop academic-frontend || true
          
          # Remove old deployment
          cd /home/ec2-user
          rm -rf academic-saas-frontend-old
          if [ -d academic-saas-frontend ]; then
            mv academic-saas-frontend academic-saas-frontend-old
          fi
          
          # Create deployment directory
          mkdir -p academic-saas-frontend
          cd academic-saas-frontend
          
          # Install Node.js if needed
          if [ ! -f /usr/local/bin/node ]; then
            echo "Installing Node.js..."
            cd /tmp
            wget -q https://nodejs.org/dist/v18.20.4/node-v18.20.4-linux-x64.tar.xz
            sudo tar -xf node-v18.20.4-linux-x64.tar.xz -C /usr/local --strip-components=1
            cd /home/ec2-user/academic-saas-frontend
          fi
          
          # Create systemd service file for frontend
          sudo tee /etc/systemd/system/academic-frontend.service > /dev/null <<EOF
          [Unit]
          Description=Academic SaaS Frontend
          After=network.target
          
          [Service]
          Type=simple
          User=ec2-user
          WorkingDirectory=/home/ec2-user/academic-saas-frontend
          Environment="NODE_ENV=production"
          Environment="PORT=3000"
          Environment="HOSTNAME=0.0.0.0"
          Environment="NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}"
          Environment="NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}"
          Environment="NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}"
          ExecStart=/usr/local/bin/node server.js
          Restart=always
          RestartSec=10
          StandardOutput=append:/home/ec2-user/academic-saas-frontend/frontend.log
          StandardError=append:/home/ec2-user/academic-saas-frontend/frontend-error.log
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
          sudo systemctl daemon-reload
          sudo systemctl enable academic-frontend
          
          echo "Ready to receive files..."

    - name: Create deployment archive
      run: |
        cd .next/standalone
        tar -czf ../../standalone.tar.gz .
        cd ../..

    - name: Copy build to EC2
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.EC2_HOST_DEV }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_KEY }}
        source: standalone.tar.gz
        target: /tmp

    - name: Start frontend service
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST_DEV }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_KEY }}
        timeout: 5m
        command_timeout: 5m
        script: |
          cd /home/ec2-user/academic-saas-frontend
          
          # Extract standalone build
          tar -xzf /tmp/standalone.tar.gz
          rm /tmp/standalone.tar.gz
          
          # Start the service
          sudo systemctl start academic-frontend
          
          # Wait and verify through Nginx
          sleep 10
          if sudo systemctl is-active --quiet academic-frontend; then
            echo "✅ Frontend service is running!"
            # Verify through Nginx
            if curl -s -o /dev/null -w "%{http_code}" http://localhost | grep -q "200\|301\|302"; then
              echo "✅ Frontend accessible through Nginx!"
              echo "URL: http://${{ secrets.EC2_HOST_DEV }}"
            else
              echo "⚠️  Frontend running but not accessible through Nginx"
              echo "Check Nginx configuration"
            fi
          else
            echo "❌ Frontend service failed to start"
            sudo journalctl -u academic-frontend -n 50
            exit 1
          fi

  deploy-prod:
    name: Deploy to Production Environment  
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      env:
        NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL_PROD }}
        NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL_PROD }}
        NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
      run: |
        npm run build
        # Prepare standalone deployment
        cp -r public .next/standalone/
        cp -r .next/static .next/standalone/.next/

    - name: Deploy Frontend to EC2 Prod
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST_PROD }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_KEY }}
        timeout: 15m
        command_timeout: 15m
        script: |
          # Stop existing service
          echo "Stopping frontend service..."
          sudo systemctl stop academic-frontend || true
          
          # Backup and remove old deployment
          cd /home/ec2-user
          if [ -d academic-saas-frontend ]; then
            cp -r academic-saas-frontend academic-saas-frontend-backup-$(date +%Y%m%d-%H%M%S)
            rm -rf academic-saas-frontend-old
            mv academic-saas-frontend academic-saas-frontend-old
          fi
          
          # Create deployment directory
          mkdir -p academic-saas-frontend
          cd academic-saas-frontend
          
          # Install Node.js if needed
          if [ ! -f /usr/local/bin/node ]; then
            echo "Installing Node.js..."
            cd /tmp
            wget -q https://nodejs.org/dist/v18.20.4/node-v18.20.4-linux-x64.tar.xz
            sudo tar -xf node-v18.20.4-linux-x64.tar.xz -C /usr/local --strip-components=1
            cd /home/ec2-user/academic-saas-frontend
          fi
          
          # Create systemd service file for frontend
          sudo tee /etc/systemd/system/academic-frontend.service > /dev/null <<EOF
          [Unit]
          Description=Academic SaaS Frontend
          After=network.target
          
          [Service]
          Type=simple
          User=ec2-user
          WorkingDirectory=/home/ec2-user/academic-saas-frontend
          Environment="NODE_ENV=production"
          Environment="PORT=3000"
          Environment="HOSTNAME=0.0.0.0"
          Environment="NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL_PROD }}"
          Environment="NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL_PROD }}"
          Environment="NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}"
          ExecStart=/usr/local/bin/node server.js
          Restart=always
          RestartSec=10
          StandardOutput=append:/home/ec2-user/academic-saas-frontend/frontend.log
          StandardError=append:/home/ec2-user/academic-saas-frontend/frontend-error.log
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
          sudo systemctl daemon-reload
          sudo systemctl enable academic-frontend
          
          echo "Ready to receive files..."

    - name: Transfer standalone build to EC2
      run: |
        # Create deployment package
        cd .next/standalone
        tar -czf ../../frontend-standalone.tar.gz .
        cd ../..
        
        # Transfer using SSH
        echo "${{ secrets.EC2_SSH_KEY }}" > deploy_key
        chmod 600 deploy_key
        scp -o StrictHostKeyChecking=no -i deploy_key frontend-standalone.tar.gz ec2-user@${{ secrets.EC2_HOST_PROD }}:/tmp/
        rm deploy_key frontend-standalone.tar.gz

    - name: Start frontend service
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST_PROD }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_KEY }}
        timeout: 5m
        command_timeout: 5m
        script: |
          cd /home/ec2-user/academic-saas-frontend
          
          # Extract standalone build
          tar -xzf /tmp/standalone.tar.gz
          rm /tmp/standalone.tar.gz
          
          # Start the service
          sudo systemctl start academic-frontend
          
          # Wait and verify through Nginx
          sleep 10
          if sudo systemctl is-active --quiet academic-frontend; then
            echo "✅ Frontend service is running!"
            # Verify through Nginx
            if curl -s -o /dev/null -w "%{http_code}" http://localhost | grep -q "200\|301\|302"; then
              echo "✅ Frontend accessible through Nginx!"
              echo "URL: http://${{ secrets.EC2_HOST_PROD }}"
            else
              echo "⚠️  Frontend running but not accessible through Nginx"
              echo "Check Nginx configuration"
            fi
          else
            echo "❌ Frontend service failed to start"
            sudo journalctl -u academic-frontend -n 50
            exit 1
          fi